# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'speedpc.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import psutil
import os
import shutil
import subprocess
import sys
import win32com.client
from time import sleep
from PyQt5.QtGui import QIcon
import pystray
from PIL import Image
from PyQt5.QtWidgets import QMessageBox


Thisfile = sys.argv[0] # Полный путь к файлу, включая название и расширение
Thisfile_name = os.path.basename(Thisfile) # Название файла без пути
user_path = os.path.expanduser('~') # Путь к папке пользователя

dowbool = False
tempbool = False
proctempbool = False
flashbool = False
trashbool = False
prefetchbool = False


def procenttempdef():
    temp_folder = os.environ.get('TEMP')
    for file_name in os.listdir(temp_folder):
        file_path = os.path.join(temp_folder, file_name)
        try:
            if os.path.isfile(file_path):
                os.remove(file_path)
            elif os.path.isdir(file_path):
                os.rmdir(file_path)
        except Exception as e:
            pass

def trashdef():
    try:
        os.system("rd /s /q %systemdrive%\$Recycle.bin")
    except:
        pass

def tempdef():
    directory = r'C:\Windows\System32\temp'
    try:
        items = os.listdir(directory)
    except:
       return
    for item in items:
        item_path = os.path.join(directory, item)
        try:
            if os.path.isfile(item_path):
                os.remove(item_path)
            else:
                shutil.rmtree(item_path)
        except Exception as e:
            pass

def temp2def():
    directory = r'C:\Windows\temp'
    try:
        items = os.listdir(directory)
    except:
        return
    for item in items:
        item_path = os.path.join(directory, item)
        try:
            if os.path.isfile(item_path):
                os.remove(item_path)
            else:
                shutil.rmtree(item_path)
        except Exception as e:
            pass

def prefetchdef():
    directory = r'C:\Windows\Prefetch'
    try:
        items = os.listdir(directory)
    except:
        return
    for item in items:
        item_path = os.path.join(directory, item)
        try:
            if os.path.isfile(item_path):
                os.remove(item_path)
            else:
                shutil.rmtree(item_path)
        except Exception as e:
            pass

def downloaddef():
    folder_path = os.path.expanduser("~/Downloads")
    try:
        items = os.listdir(folder_path)
    except:
        return
    for item in items:
        item_path = os.path.join(folder_path, item)
        try:
            if os.path.isfile(item_path):
                os.remove(item_path)
            else:
                shutil.rmtree(item_path)
        except Exception as e:
            pass

def dnsdef():
    try:
        subprocess.run(["ipconfig", "/flushdns"], capture_output=True, shell=True)
    except:
        pass


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 550)
        MainWindow.setStyleSheet("background-color: rgb(34, 154, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.speedpc = QtWidgets.QLabel(self.centralwidget)
        self.speedpc.setGeometry(QtCore.QRect(50, 20, 300, 60))
        font = QtGui.QFont()
        font.setFamily("HoloLens MDL2 Assets")
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.speedpc.setFont(font)
        self.speedpc.setStyleSheet("")
        self.speedpc.setAlignment(QtCore.Qt.AlignCenter)
        self.speedpc.setObjectName("speedpc")
        MainWindow.setWindowIcon(QIcon('ico.ico'))
        self.bypon = QtWidgets.QLabel(self.centralwidget)
        self.bypon.setGeometry(QtCore.QRect(10, 520, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Microsoft JhengHei UI Light")
        font.setPointSize(12)
        font.setItalic(False)
        self.bypon.setFont(font)
        self.bypon.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.bypon.setObjectName("bypon")
        self.maincheckbox = QtWidgets.QCheckBox(self.centralwidget)
        self.maincheckbox.setGeometry(QtCore.QRect(90, 80, 290, 30))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.maincheckbox.setFont(font)
        self.maincheckbox.setObjectName("maincheckbox")
        self.maincheckbox.setStyleSheet(
            "QCheckBox::indicator {"
            "    width: 20px;"
            "    height: 20px;"
            "    border-radius: 10px;"
            "    background-color: #BDAAD0;"
            "    border: 2px solid #544D97"
            "}"
            "QCheckBox::indicator:checked {"
            "    background-color: #73CB82;"
            "}"
            "QCheckBox::indicator:checked:hover {"
            "    border: 2px solid #3FA2C6;"
            "    border: 2px solid #000981;"
            "}"
            "QCheckBox::indicator:hover {"
            "    border: 2px solid #000981;"
            "}"
        )
        self.startbutton = QtWidgets.QPushButton(self.centralwidget)
        self.startbutton.setGeometry(QtCore.QRect(50, 360, 300, 60))
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI Light")
        font.setPointSize(32)
        font.setBold(False)
        font.setWeight(50)
        self.startbutton.setFont(font)
        self.startbutton.setStyleSheet(
"""
   QPushButton {
  background-color: #544D97;
  border: 2px solid #C0C0C0;
  border-radius: 8px;
  color: white;
  font-weight: bold;
  padding: 8px 16px;
  qproperty-animation: "button-animation";
}

QPushButton:hover {
  background-color: #6559A0;
}

QPushButton:pressed {
  background-color: #433E73;
}

@qproperty-button-animation {
  from {
    background-color: #544D97;
    transform: scale(1);
  }
  to {
    background-color: #6559A0;
    transform: scale(1.1);
  }
  duration: 200ms;
  easing: ease-in-out;
}

"""
        )
        self.startbutton.setObjectName("startbutton")
        self.proctempcheckbox = QtWidgets.QCheckBox(self.centralwidget)
        self.proctempcheckbox.setGeometry(QtCore.QRect(20, 130, 121, 30))
        font = QtGui.QFont()
        font.setFamily("Sitka Small")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.proctempcheckbox.setFont(font)
        self.proctempcheckbox.setObjectName("proctempcheckbox")
        self.proctempcheckbox.setStyleSheet(
            "QCheckBox::indicator {"
            "    width: 20px;"
            "    height: 20px;"
            "    border-radius: 10px;"
            "    background-color: #BDAAD0;"
            "    border: 2px solid #544D97"
            "}"
            "QCheckBox::indicator:checked {"
            "    background-color: #73CB82;"
            "}"
            "QCheckBox::indicator:checked:hover {"
            "    border: 2px solid #3FA2C6;"
            "    border: 2px solid #000981;"
            "}"
            "QCheckBox::indicator:hover {"
            "    border: 2px solid #000981;"
            "}"
        )

        self.korzinacheckbox = QtWidgets.QCheckBox(self.centralwidget)
        self.korzinacheckbox.setGeometry(QtCore.QRect(150, 130, 121, 30))
        font = QtGui.QFont()
        font.setFamily("Sitka Small")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.korzinacheckbox.setFont(font)
        self.korzinacheckbox.setObjectName("korzinacheckbox")
        self.korzinacheckbox.setStyleSheet(
            "QCheckBox::indicator {"
            "    width: 20px;"
            "    height: 20px;"
            "    border-radius: 10px;"
            "    background-color: #BDAAD0;"
            "    border: 2px solid #544D97"
            "}"
            "QCheckBox::indicator:checked {"
            "    background-color: #73CB82;"
            "}"
            "QCheckBox::indicator:checked:hover {"
            "    border: 2px solid #3FA2C6;"
            "    border: 2px solid #000981;"
            "}"
            "QCheckBox::indicator:hover {"
            "    border: 2px solid #000981;"
            "}"
        )
        self.tempcheckbox = QtWidgets.QCheckBox(self.centralwidget)
        self.tempcheckbox.setGeometry(QtCore.QRect(290, 130, 121, 30))
        font = QtGui.QFont()
        font.setFamily("Sitka Small")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.tempcheckbox.setFont(font)
        self.tempcheckbox.setObjectName("tempcheckbox")
        self.tempcheckbox.setStyleSheet(
            "QCheckBox::indicator {"
            "    width: 20px;"
            "    height: 20px;"
            "    border-radius: 10px;"
            "    background-color: #BDAAD0;"
            "    border: 2px solid #544D97"
            "}"
            "QCheckBox::indicator:checked {"
            "    background-color: #73CB82;"
            "}"
            "QCheckBox::indicator:checked:hover {"
            "    border: 2px solid #3FA2C6;"
            "    border: 2px solid #000981;"
            "}"
            "QCheckBox::indicator:hover {"
            "    border: 2px solid #000981;"
            "}"
        )
        self.startupcheckbox = QtWidgets.QCheckBox(self.centralwidget)
        self.startupcheckbox.setGeometry(QtCore.QRect(50, 290, 331, 30))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.startupcheckbox.setFont(font)
        self.startupcheckbox.setObjectName("startupcheckbox")
        self.startupcheckbox.setStyleSheet(
            "QCheckBox::indicator {"
            "    width: 20px;"
            "    height: 20px;"
            "    border-radius: 10px;"
            "    background-color: #BDAAD0;"
            "    border: 2px solid #544D97"
            "}"
            "QCheckBox::indicator:checked {"
            "    background-color: #73CB82;"
            "}"
            "QCheckBox::indicator:checked:hover {"
            "    border: 2px solid #3FA2C6;"
            "    border: 2px solid #000981;"
            "}"
            "QCheckBox::indicator:hover {"
            "    border: 2px solid #000981;"
            "}"
        )
        self.prefetchcheckbox = QtWidgets.QCheckBox(self.centralwidget)
        self.prefetchcheckbox.setGeometry(QtCore.QRect(20, 210, 121, 30))
        font = QtGui.QFont()
        font.setFamily("Sitka Small")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.prefetchcheckbox.setFont(font)
        self.prefetchcheckbox.setObjectName("prefetchcheckbox")
        self.prefetchcheckbox.setStyleSheet(
            "QCheckBox::indicator {"
            "    width: 20px;"
            "    height: 20px;"
            "    border-radius: 10px;"
            "    background-color: #BDAAD0;"
            "    border: 2px solid #544D97"
            "}"
            "QCheckBox::indicator:checked {"
            "    background-color: #73CB82;"
            "}"
            "QCheckBox::indicator:checked:hover {"
            "    border: 2px solid #3FA2C6;"
            "    border: 2px solid #000981;"
            "}"
            "QCheckBox::indicator:hover {"
            "    border: 2px solid #000981;"
            "}"
        )
        self.downloadcheckbox = QtWidgets.QCheckBox(self.centralwidget)
        self.downloadcheckbox.setGeometry(QtCore.QRect(150, 210, 121, 30))
        font = QtGui.QFont()
        font.setFamily("Sitka Small")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.downloadcheckbox.setFont(font)
        self.downloadcheckbox.setObjectName("downloadcheckbox")
        self.downloadcheckbox.setStyleSheet(
            "QCheckBox::indicator {"
            "    width: 20px;"
            "    height: 20px;"
            "    border-radius: 10px;"
            "    background-color: #BDAAD0;"
            "    border: 2px solid #544D97"
            "}"
            "QCheckBox::indicator:checked {"
            "    background-color: #73CB82;"
            "}"
            "QCheckBox::indicator:checked:hover {"
            "    border: 2px solid #3FA2C6;"
            "    border: 2px solid #000981;"
            "}"
            "QCheckBox::indicator:hover {"
            "    border: 2px solid #000981;"
            "}"
        )
        self.flushdnscheckbox = QtWidgets.QCheckBox(self.centralwidget)
        self.flushdnscheckbox.setGeometry(QtCore.QRect(290, 210, 121, 30))
        font = QtGui.QFont()
        font.setFamily("Sitka Small")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.flushdnscheckbox.setFont(font)
        self.flushdnscheckbox.setObjectName("flushdnscheckbox")
        self.flushdnscheckbox.setStyleSheet(
            "QCheckBox::indicator {"
            "    width: 20px;"
            "    height: 20px;"
            "    border-radius: 10px;"
            "    background-color: #BDAAD0;"
            "    border: 2px solid #544D97"
            "}"
            "QCheckBox::indicator:checked {"
            "    background-color: #73CB82;"
            "}"
            "QCheckBox::indicator:checked:hover {"
            "    border: 2px solid #3FA2C6;"
            "    border: 2px solid #000981;"
            "}"
            "QCheckBox::indicator:hover {"
            "    border: 2px solid #000981;"
            "}"
        )
        self.diskc = QtWidgets.QLabel(self.centralwidget)
        self.diskc.setGeometry(QtCore.QRect(20, 430, 361, 41))
        font = QtGui.QFont()
        font.setFamily("HoloLens MDL2 Assets")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.diskc.setFont(font)
        self.diskc.setStyleSheet("")
        self.diskc.setAlignment(QtCore.Qt.AlignCenter)
        self.diskc.setObjectName("diskc")
        self.diskcinfo = QtWidgets.QLabel(self.centralwidget)
        self.diskcinfo.setGeometry(QtCore.QRect(110, 480, 161, 41))
        font = QtGui.QFont()
        font.setFamily("HoloLens MDL2 Assets")
        font.setPointSize(25)
        font.setBold(False)
        font.setWeight(50)
        self.diskcinfo.setFont(font)
        self.diskcinfo.setStyleSheet("")
        self.diskcinfo.setAlignment(QtCore.Qt.AlignCenter)
        self.diskcinfo.setObjectName("diskcinfo")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.maincheckbox.stateChanged.connect(self.toggleCheckboxes)
        self.startupcheckbox.stateChanged.connect(self.on_startup_checkbox_clicked)
        self.downloadcheckbox.stateChanged.connect(self.on_startup_checkbox_clickeddow)
        self.prefetchcheckbox.stateChanged.connect(self.on_startup_checkbox_clickedprefetch)
        self.tempcheckbox.stateChanged.connect(self.on_startup_checkbox_clickedtemp)
        self.proctempcheckbox.stateChanged.connect(self.on_startup_checkbox_clickedproctemp)
        self.flushdnscheckbox.stateChanged.connect(self.on_startup_checkbox_clickedflash)
        self.korzinacheckbox.stateChanged.connect(self.on_startup_checkbox_clickedtrash)
        self.startbutton.clicked.connect(self.startcheckbutton)

        def closeEvent(self, event):
            event.ignore()
            self.hide()

    def startcheckbutton(self):
        dialog = QMessageBox()
        dialog.setWindowTitle('Предупреждение')
        dialog.setText('Все файлы в папках будут удалины если вы нажмёте на "Ok"\nЕсли вы хотите отменить процесс нажмите "Cancel"')
        dialog.setIcon(QMessageBox.Question)
        dialog.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        dialog.setWindowIcon(QIcon('careful.png'))

        if dialog.exec_() == QMessageBox.Ok:
            startjobbaby()
        else:
            pass

    def toggleCheckboxes(self, state):
        # включаем/выключаем все остальные галочки в зависимости от состояния галочки "maincheckbox"
        self.proctempcheckbox.setChecked(state)
        self.korzinacheckbox.setChecked(state)
        self.tempcheckbox.setChecked(state)
        self.prefetchcheckbox.setChecked(state)
        self.downloadcheckbox.setChecked(state)
        self.flushdnscheckbox.setChecked(state)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SPEED PC"))
        self.speedpc.setText(_translate("MainWindow", "SPEED PC"))
        self.bypon.setText(_translate("MainWindow", "By P0N41K"))
        self.maincheckbox.setText(_translate("MainWindow", "Выделить все файлы"))
        self.startbutton.setText(_translate("MainWindow", "START"))
        self.proctempcheckbox.setText(_translate("MainWindow", "%Temp%"))
        self.korzinacheckbox.setText(_translate("MainWindow", "Корзина"))
        self.tempcheckbox.setText(_translate("MainWindow", "Temp"))
        self.startupcheckbox.setText(_translate("MainWindow", "Запускать вместе с системой"))
        self.prefetchcheckbox.setText(_translate("MainWindow", "Prefetch"))
        self.downloadcheckbox.setText(_translate("MainWindow", "Загрузки"))
        self.flushdnscheckbox.setText(_translate("MainWindow", "FlushDNS"))
        self.diskc.setText(_translate("MainWindow", "Диск С свободен на:"))
        disk_usage = psutil.disk_usage('C:/')
        free_space_gb = round(disk_usage.free / (1024.0 ** 3), 2)
        self.diskcinfo.setText(_translate("MainWindow", f"{free_space_gb} ГБ"))

    def autocheckbox(self):
        self.startupcheckbox.setChecked(True)

    def on_startup_checkbox_clicked(self, state):
        if state == 2: # состояние чекбокса "Включено"
            self.function_1()
        else: # состояние чекбокса "Выключено"
            self.function_2()

    def on_startup_checkbox_clickeddow(self, state):
        global dowbool
        if state == 2: # состояние чекбокса "Включено"
            dowbool = True
        else: # состояние чекбокса "Выключено"
            dowbool = False

    def on_startup_checkbox_clickedtemp(self, state):
        global tempbool
        if state == 2: # состояние чекбокса "Включено"
            tempbool = True
        else: # состояние чекбокса "Выключено"
            tempbool = False

    def on_startup_checkbox_clickedproctemp(self, state):
        global proctempbool
        if state == 2: # состояние чекбокса "Включено"
            proctempbool = True
        else: # состояние чекбокса "Выключено"
            proctempbool = False

    def on_startup_checkbox_clickedflash(self, state):
        global flashbool
        if state == 2: # состояние чекбокса "Включено"
            flashbool = True
        else: # состояние чекбокса "Выключено"
            flashbool = False

    def on_startup_checkbox_clickedtrash(self, state):
        global trashbool
        if state == 2: # состояние чекбокса "Включено"
            trashbool = True
        else: # состояние чекбокса "Выключено"
            trashbool = False

    def on_startup_checkbox_clickedprefetch(self, state):
        global prefetchbool
        if state == 2: # состояние чекбокса "Включено"
            prefetchbool = True
        else: # состояние чекбокса "Выключено"
            prefetchbool = False

    def function_1(self):
        folder_path = os.path.join(os.environ['APPDATA'], 'speedpc')
        file_path = os.path.join(folder_path, 'settings.txt')
        with open(file_path, "w") as file:
            file.write("win32 = True")
        path = rf"{Thisfile}"
        shell = win32com.client.Dispatch("WScript.Shell")
        shortcut_dir = os.path.join(os.environ['APPDATA'], 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')
        shortcut = shell.CreateShortCut(os.path.join(shortcut_dir, "SPEED PC.lnk"))
        shortcut.Targetpath = sys.executable  # Используем интерпретатор Python, чтобы запустить скрипт
        shortcut.Arguments = path  # Передаем путь к файлу скрипта как аргумент
        shortcut.WorkingDirectory = os.path.dirname(path)
        shortcut.save()
        ui.autocheckbox()

    def function_2(self):
        folder_path = os.path.join(os.environ['APPDATA'], 'speedpc')
        file_path = os.path.join(folder_path, 'settings.txt')
        with open(file_path, "w") as file:
            file.write("win32 = False")
        direk = fr"{user_path}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\SPEED PC.lnk"
        os.remove(direk)


def exit_program():
    tray.stop()
    MainWindow.close()

def open_program():
    MainWindow.showNormal()
    MainWindow.activateWindow()

def setup_tray_icon():
    image = Image.open("ico.ico")
    menu = pystray.Menu(
        pystray.MenuItem('Открыть', lambda: open_program()),
        pystray.MenuItem('Выход', lambda: exit_program())
    )
    tray = pystray.Icon("SPEED PC", image, "SPEED PC", menu)
    return tray

def provauto():
    folder_path = os.path.join(os.environ['APPDATA'], 'speedpc')
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    file_path = os.path.join(folder_path, 'settings.txt')
    if not os.path.exists(file_path):
        with open(file_path, 'w') as f:
            f.write('win32 = False')
            f.close()
    with open(file_path, 'r') as f:
        contentssettings = f.read()
        f.close()
    if contentssettings == "win32 = False":
        pass
    elif contentssettings == "win32 = True":
        path = rf"{Thisfile}"
        shell = win32com.client.Dispatch("WScript.Shell")
        shortcut_dir = os.path.join(os.environ['APPDATA'], 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')
        shortcut = shell.CreateShortCut(os.path.join(shortcut_dir, "SPEED PC.lnk"))
        shortcut.Targetpath = sys.executable  # Используем интерпретатор Python, чтобы запустить скрипт
        shortcut.Arguments = path  # Передаем путь к файлу скрипта как аргумент
        shortcut.WorkingDirectory = os.path.dirname(path)
        shortcut.save()
        ui.autocheckbox()

def startjobbaby():
    chetchikbool = 0
    disk_usage = psutil.disk_usage('C:/')
    free_spaceold = round(disk_usage.free / (1024.0 ** 3), 2)
    if flashbool == True:
        chetchikbool += 1
    if tempbool == True:
        chetchikbool += 1
    if proctempbool == True:
        chetchikbool += 1
    if trashbool == True:
        chetchikbool += 1
    if prefetchbool == True:
        chetchikbool += 1
    if dowbool == True:
        chetchikbool += 1
    if chetchikbool <= 0:
        dialog = QMessageBox()
        dialog.setWindowTitle('Предупреждение')
        dialog.setText(
            'Выберите те элементы которые хотите удалить :)')
        dialog.setIcon(QMessageBox.Question)
        dialog.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        dialog.setWindowIcon(QIcon('careful.png'))

        if dialog.exec_() == QMessageBox.Ok:
            pass
        else:
            pass
        return
    if flashbool == True:
        dnsdef()
    if tempbool == True:
        tempdef()
        temp2def()
    if proctempbool == True:
        procenttempdef()
    if trashbool == True:
        trashdef()
    if prefetchbool == True:
        prefetchdef()
    if dowbool == True:
        downloaddef()
    disk_usage = psutil.disk_usage('C:/')
    free_spacenew = round(disk_usage.free / (1024.0 ** 3), 2)
    dialog = QMessageBox()
    dialog.setWindowTitle('Конец удаления')
    dialog.setText(
        f'Все элементы были успешно удалены\nБыло:{free_spaceold} Гб\nСтало:{free_spacenew} Гб')
    dialog.setIcon(QMessageBox.Question)
    dialog.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
    dialog.setWindowIcon(QIcon('careful.png'))

    if dialog.exec_() == QMessageBox.Ok:
        pass
    else:
        pass


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    provauto()

    MainWindow.show()

    tray = setup_tray_icon()
    sys.exit(tray.run())

    sys.exit(app.exec_())

